*, *:before, *:after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-size: 22px;
    font-weight: bold;
    color: cornflowerblue;
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    line-height: 30px;
}

.container {
    position: relative;
}

.modal {
    position: fixed; /* so the modal stays in the center of the page even when scrolling */
    top: 50%; /* position from the top 50%  of the screen*/
    left: 50%; /* ditto from left */
    transform: translate(-50%, -50%) scale(0); /* 50% of the container in x and y directions and then make it 0 size to start. Upon active state, we simply change scale to 1 but this allows us to add transition properties to smooth the state change. */
    transition:  1000ms ease-in-out;
    border: 2px solid rgb(81, 26, 26);
    border-radius: 5px;
    z-index: 2; /* on top of overlay */
    max-width: 70%;
    background-color: burlywood;
}

.modal.active {
transform: translate(-50%, -50%) scale(1);
}

.header {
    display: flex;
    justify-content: space-between;
    padding: 15px;
    font-size: 30px;
}

.header button {
    cursor: pointer;
    background: none;
    border: none;
    font-size: 1.8rem;
    z-index: 0;
}

#overlay {
    background-color: black;
    opacity: 0;
    width: 100vw;
    height: 100vh;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    pointer-events: none; /* this seems counter intuitive: you can still activate the modal with the open modal button even though pointer events are set to none */
    transition: 300ms ease-in-out;
}

#overlay.active {
    pointer-events: all; /* this seems counter intuitive: the class of active is applied which sets pointer events however you can't close the modal with the open modal button which was the original intention. */
    opacity: 0.8;
}